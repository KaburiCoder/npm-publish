{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import { ValidPasswordType } from \"./enums/valid-password.enum\";\r\n\r\nexport function validPassword(\r\n  password: string,\r\n  type: ValidPasswordType = ValidPasswordType.korea\r\n): {\r\n  validate?: boolean;\r\n  errorMessage?: string;\r\n} {\r\n  // \uBE44\uBC00\uBC88\uD638 \uAE38\uC774 \uAC80\uC0AC\r\n  if (password.length < 8) {\r\n    return {\r\n      errorMessage: \"\uBE44\uBC00\uBC88\uD638\uB294 \uCD5C\uC18C 8\uC790 \uC774\uC0C1\uC774\uC5B4\uC57C \uD569\uB2C8\uB2E4.\",\r\n    };\r\n  }\r\n\r\n  // \uBB38\uC790 \uC885\uB958 \uAC80\uC0AC\r\n  const englishRegexp = /[a-zA-Z]/;\r\n  const specialRegexp = /[!@#$%^&*]/;\r\n  const numberRegexp = /\\d/;\r\n  const regexpes = [englishRegexp, specialRegexp, numberRegexp];\r\n  const count = regexpes.reduce((acc, regexp) => {\r\n    return acc + (regexp.test(password) ? 1 : 0);\r\n  }, 0);\r\n\r\n  if (count < 3) {\r\n    return {\r\n      errorMessage:\r\n        \"\uBE44\uBC00\uBC88\uD638\uB294 \uB300\uBB38\uC790, \uC18C\uBB38\uC790, \uC22B\uC790, \uD2B9\uC218 \uBB38\uC790\\n \uC911 3\uAC00\uC9C0 \uC774\uC0C1\uC744 \uD3EC\uD568\uD574\uC57C \uD569\uB2C8\uB2E4.\",\r\n    };\r\n  }\r\n\r\n  // // \uB2E8\uC5B4 \uB610\uB294 \uC22B\uC790 \uC870\uD569 \uAC80\uC0AC\r\n  // const words = password.split(' ');\r\n  // if (words.length === 1 || words.every((word) => word.match(/^[0-9]+$/))) {\r\n  //   return false;\r\n  // }\r\n\r\n  return {\r\n    validate: true,\r\n  };\r\n}\r\n"],
  "mappings": ";AAEO,SAAS,cACd,UACA,sBAIA;AAEA,MAAI,SAAS,SAAS,GAAG;AACvB,WAAO;AAAA,MACL,cAAc;AAAA,IAChB;AAAA,EACF;AAGA,QAAM,gBAAgB;AACtB,QAAM,gBAAgB;AACtB,QAAM,eAAe;AACrB,QAAM,WAAW,CAAC,eAAe,eAAe,YAAY;AAC5D,QAAM,QAAQ,SAAS,OAAO,CAAC,KAAK,WAAW;AAC7C,WAAO,OAAO,OAAO,KAAK,QAAQ,IAAI,IAAI;AAAA,EAC5C,GAAG,CAAC;AAEJ,MAAI,QAAQ,GAAG;AACb,WAAO;AAAA,MACL,cACE;AAAA,IACJ;AAAA,EACF;AAQA,SAAO;AAAA,IACL,UAAU;AAAA,EACZ;AACF;",
  "names": []
}
